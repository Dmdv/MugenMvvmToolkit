<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>MugenMvvmToolkit.Binding</id>
    <version>5.0.0</version>
    <title>MugenMvvmToolkit - Binding Extensions</title>
    <authors>Vyacheslav Volkov</authors>
    <description>
      This package contains the binding extensions for Windows Phone, WPF, Silverlight, WinRT.
      Mugen MVVM Toolkit makes it easier to develop cross-platform application using the Model-View-ViewModel design pattern.
      The Mugen MVVM Toolkit provides a cross-platform MVVM development framework built on top of:
      - WinForms
      - WPF
      - Silverlight 5
      - Silverlight for WP8, WP8.1
      - Xamarin.Android
      - Xamarin.iOS
      - Xamarin.Forms
      - WinRT XAML framework for Windows 8 Store apps
      The MVVM framework includes the following features that differs this project from other frameworks:
      - Deep integration with each platform.
      - Supports state preservation and restoration for mobile platforms.
      - Full Fragment support for Android, you do not need to worry about activity, fragments, sub-fragments or their state all this makes the framework.
      - Solves the nested user controls problem in MVVM, all view models are dynamically created by you, using the GetViewModel method and you do not need to use the ViewModelLocator.
      - Supports all kinds of navigation like modal window, page navigation, tab navigation, back stack fragment navigation for android. You can also easily add a new kind of navigation.
      - Navigation system works with view models and allows to expect the completion of the operation. You can pass any parameters between view models.
      - Good design mode support, for xaml platforms supports the creation of design view model with any constructor parameters.
      - Supports bindings on all platforms, all of the native binding features available for WPF platform available on all platforms and even more.
      - Binding supports C# language expressions like Linq, Extension methods, method call, ternary operator (?:), coalescing operator (??), etc.
      - Supports subscription to any control event.
      - Built-in support for validation.
      - You can easily write their own extensions for bindings.
      - Supports attached members (properties, events, methods), you can extend any object as you want.
      - Special editor for WinForms, you do not need to write code to create bindings.
      - Binding parser builds syntax tree that allows you to easily change or extend the bindings, without manipulation of the raw text.
      - Binding supports fluent syntax.
      - Excellent binding performance.
    </description>
    <releaseNotes>
Breaking changes:
      - Changed arguments of all fluent binding methods from (model) =&gt; model.Name to (model, ctx) =&gt; mode.Name, where the ctx argument is IBindingSyntaxContext interface that allows to use the specific binding extension methods instead of direct use BindingSyntaxEx class (Binding).
      - Changed the management and the creation of IocContainer for view models (Core).
      - Changed return value in the IToastPresenter.ShowAsync method to the IToast interface instead of the Task class (Core).
      - Changed implementation of INotifiableCollection.AddRange and INotifiableCollection.RemoveRange methods from the implicit to the explicit (Core).
      - Renamed protected methods in the ViewModelProvider class (Core).
      - Removed the IocContainerCreationMode enum (Core).
      - Removed the ViewModelDataTemplateModule class that is responsible for generating the default data templates for the view models (WPF, Silverlight).
      - Removed the ListItem class that is used to display the rows, the row view now show directly (Android).

Core:
      - Removed all summary comments, because in 95% of cases it does not make sense.
      - Removed SignAssembly.
      - Fixed incorrect loading of modules in runtime mode.
      - Fixed IndexOutOfRangeException when remove an item with empty filter.
      - Added the ability to use predefined parameters with an IIocContainer.
      - Added the IIocContainerOwnerViewModel interface.
      - Added the IParentAwareViewModel interface.
      - Added the TryGetViewModelById method to the IViewModelProvider class.
      - Added Initializing, Initialized events to IViewModelProvider that allows to intercept view model initialization process.
      - Added Preserving, Preserved, Restoring, Restored events to IViewModelProvider that allows to intercept state preservation\restoration process.
      - Added JetBrains.Annotations as source file instead of dll.
      - Added TryGet, GetOrCreate, Get static methods to the ServiceProvider.
      - Added the ApplicationSettings.NotificationCollectionBatchSize static property that allows to change default value of the BatchSize property.
      - Added IsInitialized property to the IMvvmApplication.
      - Added the GetViewAsync method with IViewMappingItem parameter to the IViewManager interface.
      - Added PlatformType.WinRTPhone and PlatformType.XamarinFormsWinRTPhone constants.
      - Changed the ItemsSource property type from IList&lt;T&gt; to INotifiableCollection&lt;T&gt; in IGridViewModel and IMultiViewModel interfaces.
      - Now the SuspendNotifications method suspends properties and collection notifications for the GridViewModel class.
      - Now all bootstrappers return by default all assemblies without a filter.
      - Now the WindowViewMediatorBase class invokes the OnNavigatingFrom method.

Binding:
      - Added interpolated strings support (https://msdn.microsoft.com/en-us/library/dn961160.aspx).
      - Added the ability to clear source value for binding if it implements IDisposable interface.
      - Added null check when invoke an instance method.
      - Added automatic registration of all implementations of the IDataTempateSelector interface.
      - Added the ability to traverse binding expression tree in pre-order or post-order way.
      - Added the GetView alias for the ViewModelToViewConverter.
      - Added BindingBuilderExtensions.TryGetDefaultBindingMember method.
      - Added enum converter that converts a string value to an enum value.
      - Added the SetSingleValue method to the IBindingMemberInfo interface that allows to set value without array.
      - Added the ability to use OneTime scope in binding expression (Text Property + $OneTime(GetOneTimeValue(Property1))).
      - Added BindingServiceProvider.DisableConverterAutoRegistration and BindingServiceProvider.DisableDataTemplateSelectorAutoRegistration properties.
      - Added the AttachedBindingMember.TrySetRaiseAction method that allows to set action that is invoked by INotifiableAttachedBindingMemberInfo.Raise method.
      - Replaced the &apos;Format&apos; method from resource method call to string.Format() method call.
      - Reduced memory usage for &apos;src&apos; and &apos;self&apos; resources.
      - Changed algorithm of methods resolution for dynamic methods.
      - Changed all attached member classes to abstract.
      - Now the binding sets a value for data context, even if it is null.

Android:
      - Added the GetPageTitleDelegate attached member to ViewPager.
      - Added the RestoreSelectedIndex attached member for TabLayout.
      - Added the RestoreSelectedIndex attached member for TabHost and ViewPager.
      - Added the DisableHierarchyListener attached member for ViewGroup that allows to remove the default IOnHierarchyChangeListener.
      - Added the StartActivityDelegate attached member for Activity that allows to control navigation to another Activity.
      - Added the CreateViewHolderDelegate attached member for RecyclerView that allows to create custom implementation of the ViewHolder class.
      - Added the Initialize method to the IViewFactory interface.
      - Added Filter property to IItemsSourceAdapter interface that allows to use adapter with AutoCompleteTextView.
      - Added support for the standard menu (Android).
      - Added the ability to use custom IPopupMenuPresenter to show popup menu.
      - Added the ability to use custom implementation of IStableIdProvider interface for list adapters.
      - Added support for AutoCompleteTextView.
      - Added support for Snackbar.
      - Added the ViewId property for all Fragments and Activities.
      - Updated FindByNameMember method the method uses the root view instead of target view.
      - Updated activity lifecycle events.
      - Updated support libraries to 23.0.1.3.
      - Now the activity mediator does not invoke the Dispose method when activity is destroyed.
      - Changed algorithm of view creation: first try to create a view using android factories then create using own factory, this is necessary for AppCompat library.
      - Changed the UserControl class to non abstract.
      - Changed the view creation algorithm.
      - Improved performance of the JavaObjectWeakReference class using JNI directly instead of wrapper method.
      - Improved performance when selecting a template.
      - Increased performance of ItemsSourceAdapter.
      - Increased performance of ItemsSourcePagerAdapter.
      - Increased performance of ItemsSourceRecyclerAdapter.

iOS:
      - Added MasterView and DetailView attached members for the UISplitViewController.
      - Added ClickEvent for UICollectionViewCell and UITableViewCell.
      - Added PlatformExtensions.SetHasState and PlatformExtensions.GetHasState methods that allows to control the process of saving the state of the controller.
      - Improved performance when selecting a template.
      - Increased performance of CollectionViewSourceBase.
      - Increased performance of TableViewSourceBase.

Xamarin.Forms:
      - Fixed incorrect root page navigation.
      - Added implemenation for the XamarinFormsExtensions.SendBackButtonPressed property.
      - Updated Xamarin.Forms to 1.5.1.6471.

Other:
      - Added the ToastTemplateSelector attached member.
      - Added back button handler for WinRT, WinPhone, XamForms platforms.
    </releaseNotes>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <iconUrl>https://raw.githubusercontent.com/MugenMvvmToolkit/MugenMvvmToolkit/master/logo128_128.png</iconUrl>
    <projectUrl>https://github.com/MugenMvvmToolkit/MugenMvvmToolkit</projectUrl>
    <licenseUrl>http://opensource.org/licenses/MS-PL</licenseUrl>
    <tags>mugen mvvm toolkit binding wpf winforms android windows phone winrt binding cross platform ios</tags>
    <dependencies>
      <dependency id="MugenMvvmToolkit" version="[5.0.0, 5.1.0)" />
    </dependencies>
  </metadata>
  <files>
    <!-- CORE PCL WINRT -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\portable-net45+win+wpa81+wp80\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\portable-net45+win+wpa81+wp80\MugenMvvmToolkit.Binding.pdb" />
    
    <!-- CORE PCL SILVERLIGHT -->
    <file src="..\bin\Core\PCL_Silverlight\MugenMvvmToolkit.Binding.dll" target="lib\portable-net45+sl40+win+wp71\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_Silverlight\MugenMvvmToolkit.Binding.pdb" target="lib\portable-net45+sl40+win+wp71\MugenMvvmToolkit.Binding.pdb" />

    <!-- NET 4.0 WPF -->
    <file src="..\bin\Core\NET4.0\MugenMvvmToolkit.Binding.dll" target="lib\net40-client\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\NET4.0\MugenMvvmToolkit.Binding.pdb" target="lib\net40-client\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WPF\4.0\MugenMvvmToolkit.WPF.Binding.pdb" target="lib\net40-client\MugenMvvmToolkit.WPF.Binding.pdb" />
    <file src="..\bin\Platforms\WPF\4.0\MugenMvvmToolkit.WPF.Binding.dll" target="lib\net40-client\MugenMvvmToolkit.WPF.Binding.dll" />

    <!-- NET 4.5 WPF -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\net45\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\net45\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WPF\4.5\MugenMvvmToolkit.WPF.Binding.dll" target="lib\net45\MugenMvvmToolkit.WPF.Binding.dll" />
    <file src="..\bin\Platforms\WPF\4.5\MugenMvvmToolkit.WPF.Binding.pdb" target="lib\net45\MugenMvvmToolkit.WPF.Binding.pdb" />

    <!-- SILVERLIGHT 5 -->
    <file src="..\bin\Core\PCL_Silverlight\MugenMvvmToolkit.Binding.dll" target="lib\sl5\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_Silverlight\MugenMvvmToolkit.Binding.pdb" target="lib\sl5\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\Silverlight\MugenMvvmToolkit.Silverlight.Binding.dll" target="lib\sl5\MugenMvvmToolkit.Silverlight.Binding.dll" />
    <file src="..\bin\Platforms\Silverlight\MugenMvvmToolkit.Silverlight.Binding.pdb" target="lib\sl5\MugenMvvmToolkit.Silverlight.Binding.pdb" />

    <!-- WINRT PCL -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\portable-win81+wpa81\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\portable-win81+wpa81\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WinRT\PCL\MugenMvvmToolkit.WinRT.Binding.dll" target="lib\portable-win81+wpa81\MugenMvvmToolkit.WinRT.Binding.dll" />
    <file src="..\bin\Platforms\WinRT\PCL\MugenMvvmToolkit.WinRT.Binding.pdb" target="lib\portable-win81+wpa81\MugenMvvmToolkit.WinRT.Binding.pdb" />

    <!-- WINRT 8.1 -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\win81\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\win81\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WinRT\PCL\MugenMvvmToolkit.WinRT.Binding.dll" target="lib\win81\MugenMvvmToolkit.WinRT.Binding.dll" />
    <file src="..\bin\Platforms\WinRT\PCL\MugenMvvmToolkit.WinRT.Binding.pdb" target="lib\win81\MugenMvvmToolkit.WinRT.Binding.pdb" />

    <!-- WINRT 10.0 -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\uap\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\uap\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WinRT\UWP\MugenMvvmToolkit.WinRT.Binding.dll" target="lib\uap\MugenMvvmToolkit.WinRT.Binding.dll" />
    <file src="..\bin\Platforms\WinRT\UWP\MugenMvvmToolkit.WinRT.Binding.pdb" target="lib\uap\MugenMvvmToolkit.WinRT.Binding.pdb" />

    <!-- WP 8.1 SILVERLIGHT -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\wp81\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\wp81\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WinPhone\8.1\MugenMvvmToolkit.WinPhone.Binding.dll" target="lib\wp81\MugenMvvmToolkit.WinPhone.Binding.dll" />
    <file src="..\bin\Platforms\WinPhone\8.1\MugenMvvmToolkit.WinPhone.Binding.pdb" target="lib\wp81\MugenMvvmToolkit.WinPhone.Binding.pdb" />

    <!-- WP 8.0 -->
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.dll" target="lib\wp8\MugenMvvmToolkit.Binding.dll" />
    <file src="..\bin\Core\PCL_WinRT\MugenMvvmToolkit.Binding.pdb" target="lib\wp8\MugenMvvmToolkit.Binding.pdb" />
    <file src="..\bin\Platforms\WinPhone\8.0\MugenMvvmToolkit.WinPhone.Binding.dll" target="lib\wp8\MugenMvvmToolkit.WinPhone.Binding.dll" />
    <file src="..\bin\Platforms\WinPhone\8.0\MugenMvvmToolkit.WinPhone.Binding.pdb" target="lib\wp8\MugenMvvmToolkit.WinPhone.Binding.pdb" />

    <!-- Android -->
    <file src="_._" target="lib\MonoAndroid10\_._" />

    <!-- Touch -->
    <file src="_._" target="lib\MonoTouch10\_._" />
    <file src="_._" target="lib\Xamarin.iOS10\_._" />
  </files>
</package>